apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    pipelinesascode.tekton.dev/on-event: '[push]'
    pipelinesascode.tekton.dev/on-target-branch: '[main]'
    pipelinesascode.tekton.dev/pipeline: .tekton/do-promotion.yaml
    pipelinesascode.tekton.dev/task-0: .tekton/promote.yaml
    pipelinesascode.tekton.dev/task-1: https://raw.githubusercontent.com/redhat-appstudio/tssc-sample-pipelines/main/pac/tasks/git-clone.yaml
  generateName: promo-test-on-push-
  labels:
    pipelinesascode.tekton.dev/original-prname: promo-test-on-push
spec:
  params:
  - name: git-url
    value: https://github.com/jduimovich/promotion-gitops
  - name: revision
    value: 5b29680aadefa92554e671513886b5b0517ddeb4
  - name: promotion-destination
    value: '{{source_branch}}'
  - name: event-type
    value: '{{event_type}}'
  pipelineSpec:
    params:
    - description: Gitops Repo Url
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Stage to promoted dev..stage and prod to promote from stage..prod.
      name: promotion-destination
      type: string
    - description: If push update the deployment, if PR, only run checks.
      name: event-type
      type: string
    tasks:
    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      runAfter:
      - init
      taskSpec:
        description: The git-clone Task will clone a repo from the provided url into
          the output Workspace. By default the repo will be cloned into the root of
          your Workspace.
        params:
        - description: Repository URL to clone from.
          name: url
          type: string
        - default: ""
          description: Revision to checkout. (branch, tag, sha, ref, etc...)
          name: revision
          type: string
        - default: ""
          description: Refspec to fetch before checking out revision.
          name: refspec
          type: string
        - default: "true"
          description: Initialize and fetch git submodules.
          name: submodules
          type: string
        - default: "1"
          description: Perform a shallow clone, fetching only the most recent N commits.
          name: depth
          type: string
        - default: "true"
          description: Set the `http.sslVerify` global git config. Setting this to
            `false` is not advised unless you are sure that you trust your git remote.
          name: sslVerify
          type: string
        - default: source
          description: Subdirectory inside the `output` Workspace to clone the repo
            into.
          name: subdirectory
          type: string
        - default: ""
          description: Define the directory patterns to match or exclude when performing
            a sparse checkout.
          name: sparseCheckoutDirectories
          type: string
        - default: "true"
          description: Clean out the contents of the destination directory if it already
            exists before cloning.
          name: deleteExisting
          type: string
        - default: ""
          description: HTTP proxy server for non-SSL requests.
          name: httpProxy
          type: string
        - default: ""
          description: HTTPS proxy server for SSL requests.
          name: httpsProxy
          type: string
        - default: ""
          description: Opt out of proxying HTTP/HTTPS requests.
          name: noProxy
          type: string
        - default: "false"
          description: Log the commands that are executed during `git-clone`'s operation.
          name: verbose
          type: string
        - default: ""
          description: Deprecated. Has no effect. Will be removed in the future.
          name: gitInitImage
          type: string
        - default: /tekton/home
          description: |
            Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user.
          name: userHome
          type: string
        - default: "true"
          description: |
            Check symlinks in the repo. If they're pointing outside of the repo, the build will fail.
          name: enableSymlinkCheck
          type: string
        - default: "false"
          description: Fetch all tags for the repo.
          name: fetchTags
          type: string
        results:
        - description: The precise commit SHA that was fetched by this Task.
          name: commit
        - description: The precise URL that was fetched by this Task.
          name: url
        steps:
        - computeResources: {}
          env:
          - name: HOME
            value: $(params.userHome)
          - name: PARAM_URL
            value: $(params.url)
          - name: PARAM_REVISION
            value: $(params.revision)
          - name: PARAM_REFSPEC
            value: $(params.refspec)
          - name: PARAM_SUBMODULES
            value: $(params.submodules)
          - name: PARAM_DEPTH
            value: $(params.depth)
          - name: PARAM_SSL_VERIFY
            value: $(params.sslVerify)
          - name: PARAM_SUBDIRECTORY
            value: $(params.subdirectory)
          - name: PARAM_DELETE_EXISTING
            value: $(params.deleteExisting)
          - name: PARAM_HTTP_PROXY
            value: $(params.httpProxy)
          - name: PARAM_HTTPS_PROXY
            value: $(params.httpsProxy)
          - name: PARAM_NO_PROXY
            value: $(params.noProxy)
          - name: PARAM_VERBOSE
            value: $(params.verbose)
          - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
            value: $(params.sparseCheckoutDirectories)
          - name: PARAM_USER_HOME
            value: $(params.userHome)
          - name: PARAM_FETCH_TAGS
            value: $(params.fetchTags)
          - name: PARAM_GIT_INIT_IMAGE
            value: $(params.gitInitImage)
          - name: WORKSPACE_OUTPUT_PATH
            value: $(workspaces.output.path)
          - name: WORKSPACE_SSH_DIRECTORY_BOUND
            value: $(workspaces.ssh-directory.bound)
          - name: WORKSPACE_SSH_DIRECTORY_PATH
            value: $(workspaces.ssh-directory.path)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
            value: $(workspaces.basic-auth.bound)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
            value: $(workspaces.basic-auth.path)
          image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:v1.8.2-8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8
          name: clone
          script: |
            #!/usr/bin/env sh
            set -eu

            if [ "${PARAM_VERBOSE}" = "true" ] ; then
              set -x
            fi

            if [ -n "${PARAM_GIT_INIT_IMAGE}" ]; then
              echo "WARNING: provided deprecated gitInitImage parameter has no effect."
            fi

            if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
              if [ -f "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" ] && [ -f "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" ]; then
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
              # Compatibility with kubernetes.io/basic-auth secrets
              elif [ -f "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/username" ] && [ -f "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/password" ]; then
                HOSTNAME=$(echo $PARAM_URL | awk -F/ '{print $3}')
                echo "https://$(cat ${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/username):$(cat ${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/password)@$HOSTNAME" > "${PARAM_USER_HOME}/.git-credentials"
                echo -e "[credential \"https://$HOSTNAME\"]\n  helper = store" > "${PARAM_USER_HOME}/.gitconfig"
              else
                echo "Unknown basic-auth workspace format"
                exit 1
              fi
              chmod 400 "${PARAM_USER_HOME}/.git-credentials"
              chmod 400 "${PARAM_USER_HOME}/.gitconfig"
            fi

            if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
              cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
              chmod 700 "${PARAM_USER_HOME}"/.ssh
              chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
            fi

            CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

            cleandir() {
              # Delete any existing contents of the repo directory if it exists.
              #
              # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
              # or the root of a mounted volume.
              if [ -d "${CHECKOUT_DIR}" ] ; then
                # Delete non-hidden files and directories
                rm -rf "${CHECKOUT_DIR:?}"/*
                # Delete files and directories starting with . but excluding ..
                rm -rf "${CHECKOUT_DIR}"/.[!.]*
                # Delete files and directories starting with .. plus any other character
                rm -rf "${CHECKOUT_DIR}"/..?*
              fi
            }

            if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
              cleandir
            fi

            test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
            test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
            test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

            /ko-app/git-init \
              -url="${PARAM_URL}" \
              -revision="${PARAM_REVISION}" \
              -refspec="${PARAM_REFSPEC}" \
              -path="${CHECKOUT_DIR}" \
              -sslVerify="${PARAM_SSL_VERIFY}" \
              -submodules="${PARAM_SUBMODULES}" \
              -depth="${PARAM_DEPTH}" \
              -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
            cd "${CHECKOUT_DIR}"
            RESULT_SHA="$(git rev-parse HEAD)"
            EXIT_CODE="$?"
            if [ "${EXIT_CODE}" != 0 ] ; then
              exit "${EXIT_CODE}"
            fi
            printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
            printf "%s" "${PARAM_URL}" > "$(results.url.path)"

            if [ "${PARAM_FETCH_TAGS}" = "true" ] ; then
              echo "Fetching tags"
              git fetch --tags
            fi
          securityContext:
            runAsUser: 0
        - computeResources: {}
          env:
          - name: PARAM_ENABLE_SYMLINK_CHECK
            value: $(params.enableSymlinkCheck)
          - name: PARAM_SUBDIRECTORY
            value: $(params.subdirectory)
          - name: WORKSPACE_OUTPUT_PATH
            value: $(workspaces.output.path)
          image: registry.redhat.io/ubi9:9.2-696@sha256:089bd3b82a78ac45c0eed231bb58bfb43bfcd0560d9bba240fc6355502c92976
          name: symlink-check
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"
            check_symlinks() {
              FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=false
              while read symlink
              do
                target=$(readlink -f "$symlink")
                if ! [[ "$target" =~ ^$CHECKOUT_DIR ]]; then
                  echo "The cloned repository contains symlink pointing outside of the cloned repository: $symlink"
                  FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=true
                fi
              done < <(find $CHECKOUT_DIR -type l -print)
              if [ "$FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO" = true ] ; then
                return 1
              fi
            }

            if [ "${PARAM_ENABLE_SYMLINK_CHECK}" = "true" ] ; then
              echo "Running symlink check"
              check_symlinks
            fi
        workspaces:
        - description: The git repo will be cloned onto the volume backing this Workspace.
          name: output
        - description: |
            A .ssh directory with private key, known_hosts, config, etc. Copied to
            the user's home before git commands are executed. Used to authenticate
            with the git remote when performing the clone. Binding a Secret to this
            Workspace is strongly recommended over other volume types.
          name: ssh-directory
          optional: true
        - description: |
            A Workspace containing a .gitconfig and .git-credentials file or username and password.
            These will be copied to the user's home before any git commands are run. Any
            other files in this Workspace are ignored. It is strongly recommended
            to use ssh-directory over basic-auth whenever possible and to bind a
            Secret to this Workspace over other volume types.
          name: basic-auth
          optional: true
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: output
        workspace: workspace
      - name: basic-auth
        workspace: git-auth
    - name: promote
      params:
      - name: gitops-repo-url
        value: $(params.git-url)
      - name: image
        value: $(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - clone-repository
      taskSpec:
        description: Task to promote between environments.
        params:
        - description: URL of gitops repository to update with the newly built image.
          name: gitops-repo-url
          type: string
        - description: stage - promote from dev, and prod, promote from stage.
          name: environment
          type: string
        - default: gitops-auth-secret
          description: |
            Secret of basic-auth type containing credentials to commit into gitops repository.
          name: gitops-auth-secret-name
          type: string
        steps:
        - computeResources: {}
          env:
          - name: PARAM_GITOPS_REPO_URL
            value: $(params.gitops-repo-url)
          - name: PARAM_IMAGE
            value: $(params.image)
          image: quay.io/redhat-appstudio/task-toolset@sha256:931a9f7886586391ccb38d33fd15a47eb03568f9b19512b0a57a56384fa52a3c
          name: promotion-step
          script: "if test -f /gitops-auth-secret/password ; then\n  gitops_repo_url=${PARAM_GITOPS_REPO_URL}\n
            \ remote_without_protocol=${gitops_repo_url#'https://'}\n\n  password=$(cat
            /gitops-auth-secret/password)\n  if test -f /gitops-auth-secret/username
            ; then\n    username=$(cat /gitops-auth-secret/username)\n    echo \"https://${username}:${password})@${hostname}\"
            > \"${HOME}/.git-credentials\"\n    origin_with_auth=https://${username}:${password}@${remote_without_protocol}.git\n
            \ else\n    origin_with_auth=https://${password}@${remote_without_protocol}.git\n
            \ fi\nelse\n  echo \"git credentials to push into gitops repository ${PARAM_GITOPS_REPO_URL}
            is not configured.\"\n  echo \"gitops repository is not updated automatically.\"\n
            \ echo \"You can update gitops repository with the new image: ${PARAM_IMAGE}
            manually\"\n  echo \"TODO: configure git credentials to update gitops
            repository.\"\n  exit 0\nfi\n\ndu -a \n# https://github.com/user-org/test-component-gitops
            => test-component\ngitops_repo_name=$(basename ${PARAM_GITOPS_REPO_URL})\ncomponent_id=${gitops_repo_name%'-gitops'}\ndeployment_patch_filepath=\"components/${component_id}/overlays/development/deployment-patch.yaml\"\n\ngit
            config --global user.email \"rhtap@noreplay.com\"\ngit config --global
            user.name \"gitops-update\"\n\ngit clone ${PARAM_GITOPS_REPO_URL}\ncd
            ${gitops_repo_name}\n\nsed -i \"s| image: .*| image: ${PARAM_IMAGE}|\"
            $deployment_patch_filepath\n\ngit add .\ngit commit -m \"Update '${component_id}'
            component image to: ${PARAM_IMAGE}\"\ngit remote set-url origin $origin_with_auth\ngit
            push\n"
          volumeMounts:
          - mountPath: /gitops-auth-secret
            name: gitops-auth-secret
        volumes:
        - name: gitops-auth-secret
          secret:
            optional: true
            secretName: $(params.gitops-auth-secret-name)
    workspaces:
    - name: workspace
    - name: git-auth
      optional: true
  workspaces:
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
  - name: workspace
    volumeClaimTemplate:
      metadata:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
status: {}


